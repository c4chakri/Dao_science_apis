{
	"compiler": {
		"version": "0.8.29+commit.ab55807c"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "daoManagementAddress",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct IDAO.DaoSettings",
						"name": "_daoParams",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "_governanceToken",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "symbol",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "councilAddress",
								"type": "address"
							}
						],
						"internalType": "struct IDAO.GovernanceTokenParams",
						"name": "_GovernanceTokenParams",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "minimumParticipationPercentage",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "supportThresholdPercentage",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "minimumDurationForProposal",
								"type": "uint32"
							},
							{
								"internalType": "bool",
								"name": "earlyExecution",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "canVoteChange",
								"type": "bool"
							}
						],
						"internalType": "struct IDAO.GovernanceSettings",
						"name": "_governanceSettings",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "memberAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deposit",
								"type": "uint256"
							}
						],
						"internalType": "struct IDAO.DAOMember[]",
						"name": "_daoMembers",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isTokenBasedProposal",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "MinimumRequirement",
								"type": "uint256"
							}
						],
						"internalType": "struct IDAO.ProposalCreationSettings",
						"name": "_proposalCreationParams",
						"type": "tuple"
					},
					{
						"internalType": "bool",
						"name": "_isMultiSignDAO",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "DAOBlacklistedAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DAOInsufficientAllowanceGovernanceToken",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DAOInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DAOInvalidAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DAONotADaoMember",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DAOUnAuthorizedInteraction",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "expected",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "actual",
						"type": "uint256"
					}
				],
				"name": "DepositsMisMatch",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAFreshGovernanceToken",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "DaoCreator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_daoSettings",
				"outputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_proposalCreationSettings",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isTokenBasedProposal",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "MinimumRequirement",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "memberAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deposit",
								"type": "uint256"
							}
						],
						"internalType": "struct IDAO.DAOMember[]",
						"name": "members",
						"type": "tuple[]"
					}
				],
				"name": "addDAOMembers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "blacklisted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "canInteract",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimPower",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "proposalAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_proposerAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_title",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "_actionId",
						"type": "uint8"
					}
				],
				"name": "configureProposal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "delegatee",
						"type": "address"
					}
				],
				"name": "delegate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "delegator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "governanceSettings",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "minimumParticipationPercentage",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "supportThresholdPercentage",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "minimumDurationForProposal",
						"type": "uint32"
					},
					{
						"internalType": "bool",
						"name": "earlyExecution",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "canVoteChange",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "governanceToken",
				"outputs": [
					{
						"internalType": "contract GovernanceToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "isDAOMember",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isMultiSignDAO",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "isProposal",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "membersCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "proposalId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "proposals",
				"outputs": [
					{
						"internalType": "address",
						"name": "deployedProposalAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "title",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "memberAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deposit",
								"type": "uint256"
							}
						],
						"internalType": "struct IDAO.DAOMember[]",
						"name": "members",
						"type": "tuple[]"
					}
				],
				"name": "removeDAOMembers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "tokenDeposited",
				"outputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "totalTokenDeposits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "treasuryBalance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct IDAO.DaoSettings",
						"name": "_daoParams",
						"type": "tuple"
					}
				],
				"name": "updateDaoSettings",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint8",
								"name": "minimumParticipationPercentage",
								"type": "uint8"
							},
							{
								"internalType": "uint8",
								"name": "supportThresholdPercentage",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "minimumDurationForProposal",
								"type": "uint32"
							},
							{
								"internalType": "bool",
								"name": "earlyExecution",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "canVoteChange",
								"type": "bool"
							}
						],
						"internalType": "struct IDAO.GovernanceSettings",
						"name": "_newSettings",
						"type": "tuple"
					}
				],
				"name": "updateGovernanceSettings",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isTokenBasedProposal",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "MinimumRequirement",
								"type": "uint256"
							}
						],
						"internalType": "struct IDAO.ProposalCreationSettings",
						"name": "_proposalCreationParams",
						"type": "tuple"
					}
				],
				"name": "updateProposalMemberSettings",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawFromDAOTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"addDAOMembers((address,uint256)[])": {
					"details": "Adds new members to the DAO.",
					"params": {
						"members": "Array of members to be added. It will mint tokens to the new members if its a token based DAO"
					}
				},
				"canInteract(address)": {
					"details": "can Interact is a modifier funtion to check if the user can interact with the contract"
				},
				"configureProposal(address,address,string,uint8)": {
					"details": "Configures a proposal for the DAO.",
					"params": {
						"_actionId": "ID of the action proposed 0 for mint and 5 for burn.",
						"_proposerAddress": "Address of the proposal creator.",
						"_title": "Title of the proposal.",
						"proposalAddress": "Address of the deployed proposal."
					}
				},
				"constructor": {
					"details": "Initializes the DAO with the provided parameters.",
					"params": {
						"_GovernanceTokenParams": "Parameters for governance token creation.",
						"_daoMembers": "Initial members of the DAO.",
						"_daoParams": "Initial settings for the DAO.",
						"_governanceSettings": "Governance configuration settings.",
						"_governanceToken": "Address of an existing governance token or zero to create a new token.",
						"_isMultiSignDAO": "Flag indicating if the DAO requires multi-signature for actions.",
						"_proposalCreationParams": "Settings for creating proposals in the DAO.",
						"daoManagementAddress": "The address of the DAO management contract."
					}
				},
				"removeDAOMembers((address,uint256)[])": {
					"details": "Removes members from the DAO.",
					"params": {
						"members": "Array of members to be removed."
					}
				},
				"updateGovernanceSettings((uint8,uint8,uint32,bool,bool))": {
					"details": "Updates the governance settings for the DAO.",
					"params": {
						"_newSettings": "The new governance settings."
					}
				},
				"updateProposalMemberSettings((bool,uint256))": {
					"details": "Updates the proposal creation settings for the DAO.",
					"params": {
						"_proposalCreationParams": "The new proposal creation settings."
					}
				},
				"withdrawFromDAOTreasury(address,uint256)": {
					"details": "Withdraws funds from the DAO treasury.",
					"params": {
						"_to": "The recipient address.",
						"amount": "The amount to withdraw."
					}
				},
				"withdrawTokens(address,address,uint256)": {
					"details": "Withdraws governance tokens from the DAO.",
					"params": {
						"_amount": "The amount to withdraw.",
						"_to": "The recipient address.",
						"_token": "The address ERC20 Token which are deposited in DAO"
					}
				}
			},
			"stateVariables": {
				"DaoCreator": {
					"details": "Address of the creator of the DAO."
				},
				"_daoSettings": {
					"details": "DAO settings including parameters like quorum and voting period."
				},
				"_proposalCreationSettings": {
					"details": "Settings related to proposal creation, such as required deposit."
				},
				"blacklisted": {
					"details": "Mapping to track blacklisted addresses."
				},
				"delegator": {
					"details": "Mapping of addresses to the amount of tokens deposited."
				},
				"governanceSettings": {
					"details": "Governance settings including parameters like treasury limits."
				},
				"governanceToken": {
					"details": "The governance token used for voting and staking within the DAO."
				},
				"isDAOMember": {
					"details": "Mapping to check if an address is a DAO member."
				},
				"isMultiSignDAO": {
					"details": "Indicates if the DAO is multi-signature enabled."
				},
				"isProposal": {
					"details": "Mapping to check if an address is a proposal contract."
				},
				"membersCount": {
					"details": "Counter for tracking the number of DAO members."
				},
				"proposalId": {
					"details": "Counter for tracking proposal IDs."
				},
				"proposals": {
					"details": "Mapping of proposal ID to proposal information."
				},
				"treasuryBalance": {
					"details": "Mapping of addresses to their treasury balance."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/DAO@v3Agent/contracts/Dao.sol": "DAO"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
			"license": "MIT",
			"urls": [
				"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
				"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606",
			"license": "MIT",
			"urls": [
				"bzz-raw://fd54abb96a6156d9a761f6fdad1d3004bc48d2d4fce47f40a3f91a7ae83fc3a1",
				"dweb:/ipfs/QmUrFSGkTDJ7WaZ6qPVVe3Gn5uN2viPb7x7QQ35UX4DofX"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/governance/utils/IVotes.sol": {
			"keccak256": "0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947",
			"license": "MIT",
			"urls": [
				"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856",
				"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2"
			]
		},
		"@openzeppelin/contracts/governance/utils/Votes.sol": {
			"keccak256": "0x3f91c79d6f55db9e4fc36e1cfe6a483a7b0f5be60fecbd979555071673746d47",
			"license": "MIT",
			"urls": [
				"bzz-raw://9b1e3c64cbeb2757a2a1a45c69f7f3984a93b0eadd1016341b64f9d94f89d7c4",
				"dweb:/ipfs/QmP1Mj14U4vMTFa2rv2nodMbWSCov2ac9Md8W2aUcgYdKX"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC5267.sol": {
			"keccak256": "0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a",
				"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC5805.sol": {
			"keccak256": "0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818",
			"license": "MIT",
			"urls": [
				"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a",
				"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC6372.sol": {
			"keccak256": "0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33",
			"license": "MIT",
			"urls": [
				"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb",
				"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171",
				"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
			"keccak256": "0xaa7f0646f49ebe2606eeca169f85c56451bbaeeeb06265fa076a03369a25d1d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://ee931d4e832385765967efe6366dcc6d00d6a2d794f9c66ee38283c03882de9c",
				"dweb:/ipfs/QmR6SkuJGYxpQeLz38rBdghqaWqEPfzUsL9kBoXgEXKtbD"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
			"keccak256": "0x62dc9346044aabf22d78541bd495aa6ca05a7f5100aed26196ba35d40b59fcb5",
			"license": "MIT",
			"urls": [
				"bzz-raw://5221df4501c74cd4493fee1a0f0788e02c4dc78c3c601e9f557f557c5a53ea92",
				"dweb:/ipfs/QmZpzyYY9dKLrgvYhXSHT93jwqb1UGvtGNMQk5dpECY5pa"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3",
				"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Nonces.sol": {
			"keccak256": "0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f",
			"license": "MIT",
			"urls": [
				"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e",
				"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Pausable.sol": {
			"keccak256": "0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc",
				"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc"
			]
		},
		"@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
				"dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"
			]
		},
		"@openzeppelin/contracts/utils/ShortStrings.sol": {
			"keccak256": "0x7d94fa0af099a2172eb01f9c8a8a443cbe7e0e43654841563e4e09968efdb549",
			"license": "MIT",
			"urls": [
				"bzz-raw://65e38fb76b6add407d4557753ae83dd1268e8261195dbe5c19a580d5ba6e4e9a",
				"dweb:/ipfs/QmTkGSJtaQrqjcyWM4AgemeEmKgtDydKPPVRajsUJRQSrK"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
				"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c",
			"license": "MIT",
			"urls": [
				"bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251",
				"dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
			"license": "MIT",
			"urls": [
				"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
				"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
			"keccak256": "0x10eb97d047f8d84fe263a02bb4a656ac6674f6679d74532cc37546289e073a9d",
			"license": "MIT",
			"urls": [
				"bzz-raw://3e41287d40b0c46982f1083d40d32de2761f009c5c51627fe79a7feb0ab1cf5c",
				"dweb:/ipfs/Qme7dbh6HX3ZvUJdbQAcVqXkmyXyfcLiUZRhhon3cU6K8p"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
			"keccak256": "0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575",
			"license": "MIT",
			"urls": [
				"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e",
				"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
				"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
				"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"@openzeppelin/contracts/utils/structs/Checkpoints.sol": {
			"keccak256": "0x66364cd3247ea71cdb58f080f5d5ed6732433a8001413139661841535494692f",
			"license": "MIT",
			"urls": [
				"bzz-raw://0f87914c6645b58eaf75f00a156037a7da91129f3a56aec44aebfc715b19ea44",
				"dweb:/ipfs/QmNX7NLSMXyWuogvf8wfCwjUGwLhLBZrGktWPSdoHtERGp"
			]
		},
		"@openzeppelin/contracts/utils/types/Time.sol": {
			"keccak256": "0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f867d046908497287d8a67643dd5d7e38c4027af4ab0a74ffbe1d6790c383c6",
				"dweb:/ipfs/QmQ7s9gMP1nkwThFmoDifnGgpUMsMe5q5ZrAxGDsNnRGza"
			]
		},
		"contracts/contracts/DAO@v3Agent/contracts/Dao.sol": {
			"keccak256": "0xa83363bbd3b1c7aaf6c3e0b51115dcf8ae3b997a929a2c3515be355135211369",
			"license": "MIT",
			"urls": [
				"bzz-raw://f48172d3a536c6af9300119adda4c77e2b808cbf6be0ced8b3e28cc8d3ed5ab1",
				"dweb:/ipfs/QmTKFbBDHUHDDnFMpbR3ccWyhVMQHJMwu3419K3T6dPUZv"
			]
		},
		"contracts/contracts/DAO@v3Agent/contracts/DaoManagement.sol": {
			"keccak256": "0x9a6290b1dafc7e025fdf1d50236b2397e3af891b7d7f0afd1af38678b232c0c9",
			"license": "MIT",
			"urls": [
				"bzz-raw://bf96d328182ae270f19c91b15e8edb808bdaecdb3c9879c30162d0252685b95b",
				"dweb:/ipfs/QmbenTyX7AVDcttSLs5PrU7NCQob2yQtWt6QT2iFvY8G3s"
			]
		},
		"contracts/contracts/DAO@v3Agent/contracts/GovernanceToken.sol": {
			"keccak256": "0x4a7f083923fa230ff03f30ad2e4a2a9a1c15200629a71b43ec8da2df74d9fb70",
			"license": "MIT",
			"urls": [
				"bzz-raw://7c930e260c7773d23a3eec8924fb6d44c479d0f96333b39334a9627062464fb7",
				"dweb:/ipfs/QmQgbfzbrqzaBDFwhrewzm9coeeDBfQ3LUpkHcdCoTb97V"
			]
		},
		"contracts/contracts/DAO@v3Agent/contracts/IDao.sol": {
			"keccak256": "0x44a665f8b2e5f588c4a1402612c1f8ab2d7bd18cee9b13a7f2efb164817fb8a1",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6cada9ecdfbf9365dfe18052068e9cdb754a5e0b997f16f763c8fcf1374a194",
				"dweb:/ipfs/QmVVJFWde9SKas7JDC2vBQZjyvARWxC6n77b7KTt96gSew"
			]
		},
		"contracts/contracts/DAO@v3Agent/contracts/IDaoManagement.sol": {
			"keccak256": "0x1bce909a4db0150ec0f3dc8e5da0ebda1b3a7a98a1341381de0a5e8e4ca9f947",
			"license": "MIT",
			"urls": [
				"bzz-raw://d3458273a8e5e61c82158f41695b004a02f656a8c21db513188886aad5d1c06d",
				"dweb:/ipfs/QmeKbTXCQWDBhcGxD4HxYkCQcTZULNaguZ2HfJCLL8WJDB"
			]
		},
		"contracts/contracts/DAO@v3Agent/contracts/IProposal.sol": {
			"keccak256": "0x937aefc61b3baf67f8dd26db1f70494796d9458b368f40d4fad605fdd6914872",
			"license": "MIT",
			"urls": [
				"bzz-raw://a07b1d07a9b4bbfa2a548da38e5691ca0cb6b3186d2401820c27f9ad55497db9",
				"dweb:/ipfs/QmanaYX5vi46WSKrqwD55VQHxmi5mLJzQ7kVmhVWAGjEAg"
			]
		},
		"contracts/contracts/DAO@v3Agent/contracts/Proposal.sol": {
			"keccak256": "0x05f3aabab869a44a9977e231f8832f16e775de39cd3e810322066dea8de3c0ca",
			"license": "MIT",
			"urls": [
				"bzz-raw://078dd5f2d6ec80a771f2f5ff9e1c3b039dfbd18de6541741c5b7e2ae5793f76d",
				"dweb:/ipfs/QmTCcu2h73ZNDYscaSs6QQo6bQaj4atSdsXy7QnkRS5j6r"
			]
		}
	},
	"version": 1
}